This will be where all updates are documented.

03/30/2016 - Chris Lindelof - Added weighted graph data structure and methods. This will allow us to back our train map with a weight graph.
							- Added mapFile.txt - file to read map data from. First line is number of stations. Following lines are start, end, weight
							- Added Map.java - extends Graph.java to give lock/unlock abilities and making a map.
							- Added Edge.java - represents the start, end, and weight of a locked track

04/02/2016 - Gengbo Liu     - Added train.java - represents the different kinds of train with speeds
					
04/04/2016 - Chris Lindelof - Added JavaDoc comments to Graph.java
							- Added the addEdge(int, int, int) method to Map.java and implemented.
							- mapFile.txt represents the example map provided in the slides from the first class of the semester.
							- removed Map.java's string constructor. It will not be able to be implemented.
							- Added Departure.java to store route and departure times for trains
							- Added Driver to be the main executable file of program
							- Added TrainScheduler.java which is in charge of creating the Map and scheduling the trains
							- Added inputSchedule.txt - each line contains a starting station, ending station, and expected departure time for use in the TrainScheduler class
							- mapFile.txt has had first line (number of stations) removed because it is not going to be read from file.
							
04/06/2016 - Chris Lindelof - Added toString to Departute.java
							- removed shortestPath()
							- added LinkedList<Edge> dijkstra(int) 

04/15/2016 - Gengbo Liu     - Added Gui for the whole project using framework javafx
					
04/16/2016 - Chris Lindelof - Added Dijkstra.java
							- removed dikstra(int) method
							- Optimization made in scheduling, if a dijkstra from that station has been made it uses it rather than making a new one. 
							- Graph.java now initialization all weights to Positive infinity (no possible connection)
							- Made realization that Graph.java does not support multiple edges between paths and will select the bigger weight to keep.
							- changed weight in Edge.java to a double
							- added a toString() to Edge.java
							- fixed a typo in Departure.java's toString()
							- updated mapFile.txt to not have any double edges
		   - Gengbo Liu     - Added Gui alert box to pop up window when the user type in the number does not fulfill the requirement
							
04/17/2016 - Chris Lindelof - add multi-graph functionality to Graph.java by using an arraylist<double> in all weight locations
							- add multi-graph support to Dijkstras 
							- Have the driver ask user for number of trains, randomly generate that many trains to schedule
							- Add Time.java to convert unit times to minutes in day
							- Map.java convert weights from compressed weights to actual weights representing distance

04/20/2016 - Gengbo Liu     - Added Gui table to show the result of project which convert the txt file to javafx table view

04/23/2016 - Chris Lindelof - Lock tracks by testing mode
							- working on moving the locks based on previous trains, so that we can calculate delays.
							- add more information to the equals() methods of Departure.java, Edge.java, and Train.java
							- add Testing.java, change int tests to max number of trains / 10 
							- set up Driver.java to export the results as txt and csv files that are names according to the test case and train count.
							- added line to .gitignore to ignore all files in the ./results/ directory created by the program exporting its data.
							- tweaked Gengbo's gui to work without collector method, and to provide input to Driver.java just like Testing.java does
							- add README.txt per requirements this file will explain how to run the program.
							- close Gui's window upon completion of run in preparation for the results window to open.
							
04/24/2016 - Chris Lindelof - restructured to use the same track objects
							- track objects now contain a list of when the track is locked
							- list of when track is locked is used to delay passaged through that track
							- departure is said to happen when it is expected, but it will not traverse a track that it cannot get on because it is locked
							- expected arrival time is calculated with zero delay and just the use of track weights and trains speed.
							- actual arrival is when the lock on the final track would end (its arrival).
							- some LinkedList's were replaced with ArrayList's for O(1) access if we were accessing the list sequentially more than sorting of inserting in front
							- Lock.java added to represent the lock times in the list
							- Pair.java added to represent the track and lock time that was granted to the train that requested it
							- Edge.java was renamed track for authenticity
							- Dijkstra's was updated to reference a HashMap to use pre-existing track objects to allow the track to determine if it is locked
							- Departure.java has become a capsule, its not used to represent data after it is used to instantiate Train.java
							- TrainScheduler.java now has a calculateLocks() method
								- this method uses the case being tested to determine how to calculate the length of the lock it then asks track.java if it is available
								- track.java searches to see if that time is available, if it isn't it delays the Lock until the next available window and returns the new Lock	
							- toCSV and toTXT methods added for exporting the information into Excel and/printing to screen.
							
							- format toTXT to provide table view
							- open .txt when the program is done calculating the paths.
		   - Gengbo Liu     - deleted Gui table and using .txt window to show the result
		                    - made some small change to make gui look better
							